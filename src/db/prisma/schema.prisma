// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Brand {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(50)
  active       Boolean        @default(true) @db.TinyInt
  logo         String         @db.VarChar(255)
  created_at   DateTime?      @default(now())
  updated_at   DateTime?      @updatedAt
  background   String?        @db.VarChar(255)

  @@map(name: "brands")
}

model Championship {
  id                Int                 @id @default(autoincrement())
  name              String?             @db.VarChar(100)
  metadata          String              @db.VarChar(255)
  gender            String              @db.VarChar(1)
  image             String              @db.VarChar(255)
  tag               Boolean             @db.TinyInt
  active            Boolean             @db.TinyInt
  created_at        DateTime?           @default(now())
  updated_at        DateTime?           @updatedAt
  brand             String?                @db.VarChar(10)
  short_title       String?             @db.VarChar(20)
  ChampionshipReign ChampionshipReign[]

  @@map(name: "championship")
}

model User {
  id                Int        @id @default(autoincrement())
  name              String     @db.VarChar(255)
  username          String     @db.VarChar(255)
  email             String     @unique @db.VarChar(255)
  email_verified_at DateTime?  @db.DateTime
  password          String     @db.VarChar(255)
  last_connection   DateTime?  @db.DateTime
  image             String     @db.VarChar(255)
  type              String     @db.VarChar(255)
  remember_token    String?    @db.VarChar(100)
  created_at        DateTime?  @default(now())
  updated_at        DateTime?  @updatedAt
  api_token         String?    @db.VarChar(255)
  UserRole          UserRole[]
  Report            Report[]

  @@map(name: "users")
}

model Roles {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  created_at DateTime?  @default(now())
  updated_at DateTime?  @updatedAt
  UserRole   UserRole[]

  @@map(name: "roles")
}

model UserRole {
  user    User  @relation(fields: [user_id], references: [id])
  user_id Int
  role    Roles @relation(fields: [role_id], references: [id])
  role_id Int

  @@id([user_id, role_id])
  @@map(name: "user_role")
}

model Wrestler {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  alias             String?             @db.VarChar(255)
  brand             String              @db.VarChar(255)
  status            String              @db.VarChar(255)
  is_tag            Boolean?            @default(false) @db.TinyInt
  is_champ          Boolean?            @default(false) @db.TinyInt
  twitter_acc       String              @db.VarChar(255)
  twitter_name      String              @db.VarChar(255)
  finisher          String              @db.VarChar(255)
  overall           Int                 @db.Int
  image_name        String?             @db.VarChar(255)
  sex               String              @db.VarChar(1)
  kayfabe_status    String              @db.VarChar(255)
  twitter_image     String?             @db.VarChar(255)
  categories        String?             @default("general") @db.VarChar(150)
  created_at        DateTime?           @default(now())
  updated_at        DateTime?           @updatedAt
  WrestlerTeam      WrestlerTeam[]
  ChampionshipReign ChampionshipReign[] @relation("wrestler")
  Partner           ChampionshipReign[] @relation("partner")
  Tweets            Tweets[]

  @@map(name: "wrestler")
}

model Report {
  id             Int              @id @default(autoincrement())
  title          String           @db.VarChar(255)
  image          String?          @db.VarChar(255)
  content        String           @db.Text
  admin_id       Int              @db.Int
  admin          User             @relation(fields: [admin_id], references: [id])
  created_at     DateTime?        @default(now())
  updated_at     DateTime?        @updatedAt
  exceptr        String?          @db.Text
  visible        Boolean?         @default(true) @db.TinyInt
  category       String?          @db.VarChar(255)
  deletable      Boolean?         @default(false) @db.TinyInt
  ReportComments ReportComments[]

  @@map(name: "news")
}

model ReportComments {
  id         Int       @id @default(autoincrement())
  username   String    @db.VarChar(255)
  comment    String    @db.Text
  news_id    Int       @db.Int
  report     Report    @relation(fields: [news_id], references: [id])
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map(name: "user_comments")
}

model Tweets {
  id             Int       @id @default(autoincrement())
  message        String    @db.Text
  likes          Int       @db.Int
  retweets       Int       @db.Int
  comments       Int       @db.Int
  device         String    @db.VarChar(20)
  author_id      Int       @db.Int
  wrestler       Wrestler  @relation(fields: [author_id], references: [id])
  created_at     DateTime? @default(now())
  updated_at     DateTime? @updatedAt
  reply_to       Int?      @db.Int
  reply_to_tweet Tweets?   @relation("reply_to", fields: [reply_to], references: [id])
  replies        Tweets[]  @relation("reply_to")

  @@map(name: "tweets")
}

model Team {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(125)
  slug              String              @db.VarChar(125)
  average           Int?                @db.Int
  brand             String              @db.VarChar(10)
  created_at        DateTime?           @default(now())
  updated_at        DateTime?           @updatedAt
  member_champion_1 Int?                @db.Int
  member_champion_2 Int?                @db.Int
  active            Boolean             @default(true) @db.TinyInt
  ChampionshipReign ChampionshipReign[]
  WrestlerTeam      WrestlerTeam[]

  @@map(name: "teams")
}

model WrestlerTeam {
  id          Int      @id @default(autoincrement())
  wrestler_id Int      @db.Int
  team_id     Int      @db.Int
  Wrestler    Wrestler @relation(fields: [wrestler_id], references: [id])
  Team        Team     @relation(fields: [team_id], references: [id])

  @@map(name: "wrestler_team")
}

model ChampionshipReign {
  id              Int          @id @default(autoincrement())
  days            Int          @db.Int
  current         Boolean      @db.TinyInt
  wrestler_id     Int          @db.Int
  Wrestler        Wrestler     @relation("wrestler", fields: [wrestler_id], references: [id])
  championship_id Int          @db.Int
  Championship    Championship @relation(fields: [championship_id], references: [id])
  partner         Int?         @db.Int
  Partner         Wrestler?    @relation("partner", fields: [partner], references: [id])
  team_id         Int?         @db.Int
  Team            Team?        @relation(fields: [team_id], references: [id])
  won_date        DateTime     @db.DateTime
  lost_date       DateTime?    @db.DateTime
  is_adjustable   Boolean      @default(true) @db.TinyInt
  created_at      DateTime?    @default(now())
  updated_at      DateTime?    @updatedAt

  @@map(name: "championship_reigns")
}

model Gallery {
  id         Int       @id @default(autoincrement())
  external_item_id Int? @db.Int
  type       String?    @db.VarChar(15)
  image      String    @db.VarChar(255)
  assigned   Boolean?  @default(false) @db.TinyInt
  created_at DateTime? @default(now())

  @@map(name: "gallery")
}
